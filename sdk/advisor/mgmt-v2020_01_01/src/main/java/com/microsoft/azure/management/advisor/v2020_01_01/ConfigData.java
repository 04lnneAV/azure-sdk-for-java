/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.advisor.v2020_01_01;

import com.microsoft.azure.arm.model.HasInner;
import com.microsoft.azure.management.advisor.v2020_01_01.implementation.ConfigDataInner;
import com.microsoft.azure.arm.model.Indexable;
import com.microsoft.azure.arm.model.Creatable;
import com.microsoft.azure.arm.model.Updatable;
import com.microsoft.azure.arm.model.Appliable;
import com.microsoft.azure.arm.resources.models.HasManager;
import com.microsoft.azure.management.advisor.v2020_01_01.implementation.AdvisorManager;
import java.util.List;

/**
 * Type representing ConfigData.
 */
public interface ConfigData extends HasInner<ConfigDataInner>, Indexable, Updatable<ConfigData.Update>, HasManager<AdvisorManager> {
    /**
     * @return the digests value.
     */
    List<DigestConfig> digests();

    /**
     * @return the exclude value.
     */
    Boolean exclude();

    /**
     * @return the id value.
     */
    String id();

    /**
     * @return the lowCpuThreshold value.
     */
    CpuThreshold lowCpuThreshold();

    /**
     * @return the name value.
     */
    String name();

    /**
     * @return the type value.
     */
    String type();

    /**
     * The entirety of the ConfigData definition.
     */
    interface Definition extends DefinitionStages.Blank, DefinitionStages.WithResourceGroup, DefinitionStages.WithCreate {
    }

    /**
     * Grouping of ConfigData definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of a ConfigData definition.
         */
        interface Blank extends WithResourceGroup {
        }

        /**
         * The stage of the configdata definition allowing to specify ResourceGroup.
         */
        interface WithResourceGroup {
           /**
            * Specifies resourceGroup.
            * @param resourceGroup The name of the Azure resource group
            * @return the next definition stage
            */
            WithCreate withResourceGroup(String resourceGroup);
        }

        /**
         * The stage of the configdata definition allowing to specify Digests.
         */
        interface WithDigests {
            /**
             * Specifies digests.
             * @param digests Advisor digest configuration. Valid only for subscriptions
             * @return the next definition stage
             */
            WithCreate withDigests(List<DigestConfig> digests);
        }

        /**
         * The stage of the configdata definition allowing to specify Exclude.
         */
        interface WithExclude {
            /**
             * Specifies exclude.
             * @param exclude Exclude the resource from Advisor evaluations. Valid values: False (default) or True
             * @return the next definition stage
             */
            WithCreate withExclude(Boolean exclude);
        }

        /**
         * The stage of the configdata definition allowing to specify LowCpuThreshold.
         */
        interface WithLowCpuThreshold {
            /**
             * Specifies lowCpuThreshold.
             * @param lowCpuThreshold Minimum percentage threshold for Advisor low CPU utilization evaluation. Valid only for subscriptions. Valid values: 5 (default), 10, 15 or 20. Possible values include: '5', '10', '15', '20'
             * @return the next definition stage
             */
            WithCreate withLowCpuThreshold(CpuThreshold lowCpuThreshold);
        }

        /**
         * The stage of the definition which contains all the minimum required inputs for
         * the resource to be created (via {@link WithCreate#create()}), but also allows
         * for any other optional settings to be specified.
         */
        interface WithCreate extends Creatable<ConfigData>, DefinitionStages.WithDigests, DefinitionStages.WithExclude, DefinitionStages.WithLowCpuThreshold {
        }
    }
    /**
     * The template for a ConfigData update operation, containing all the settings that can be modified.
     */
    interface Update extends Appliable<ConfigData>, UpdateStages.WithDigests, UpdateStages.WithExclude, UpdateStages.WithLowCpuThreshold {
    }

    /**
     * Grouping of ConfigData update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the configdata update allowing to specify Digests.
         */
        interface WithDigests {
            /**
             * Specifies digests.
             * @param digests Advisor digest configuration. Valid only for subscriptions
             * @return the next update stage
             */
            Update withDigests(List<DigestConfig> digests);
        }

        /**
         * The stage of the configdata update allowing to specify Exclude.
         */
        interface WithExclude {
            /**
             * Specifies exclude.
             * @param exclude Exclude the resource from Advisor evaluations. Valid values: False (default) or True
             * @return the next update stage
             */
            Update withExclude(Boolean exclude);
        }

        /**
         * The stage of the configdata update allowing to specify LowCpuThreshold.
         */
        interface WithLowCpuThreshold {
            /**
             * Specifies lowCpuThreshold.
             * @param lowCpuThreshold Minimum percentage threshold for Advisor low CPU utilization evaluation. Valid only for subscriptions. Valid values: 5 (default), 10, 15 or 20. Possible values include: '5', '10', '15', '20'
             * @return the next update stage
             */
            Update withLowCpuThreshold(CpuThreshold lowCpuThreshold);
        }

    }
}
