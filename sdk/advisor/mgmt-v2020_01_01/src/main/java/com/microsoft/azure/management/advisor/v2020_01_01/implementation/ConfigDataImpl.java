/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.advisor.v2020_01_01.implementation;

import com.microsoft.azure.management.advisor.v2020_01_01.ConfigData;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import com.microsoft.azure.management.advisor.v2020_01_01.CpuThreshold;
import java.util.List;
import com.microsoft.azure.management.advisor.v2020_01_01.DigestConfig;

class ConfigDataImpl extends CreatableUpdatableImpl<ConfigData, ConfigDataInner, ConfigDataImpl> implements ConfigData, ConfigData.Definition, ConfigData.Update {
    private String resourceGroup;
    private final AdvisorManager manager;

    ConfigDataImpl(String name, AdvisorManager manager) {
        super(name, new ConfigDataInner());
        this.manager = manager;
        // Set resource name
        this.resourceGroup = name;
        //
    }

    ConfigDataImpl(ConfigDataInner inner, AdvisorManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.resourceGroup = inner.name();
        // set resource ancestor and positional variables
        this.resourceGroup = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        // set other parameters for create and update
    }

    @Override
    public AdvisorManager manager() {
        return this.manager;
    }

    @Override
    public Observable<ConfigData> createResourceAsync() {
        ConfigurationsInner client = this.manager().inner().configurations();
        return client.createInResourceGroupAsync(this.resourceGroup, this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<ConfigData> updateResourceAsync() {
        ConfigurationsInner client = this.manager().inner().configurations();
        return client.createInResourceGroupAsync(this.resourceGroup, this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<ConfigDataInner> getInnerAsync() {
        ConfigurationsInner client = this.manager().inner().configurations();
        return null; // NOP getInnerAsync implementation as get is not supported
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }


    @Override
    public List<DigestConfig> digests() {
        return this.inner().digests();
    }

    @Override
    public Boolean exclude() {
        return this.inner().exclude();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public CpuThreshold lowCpuThreshold() {
        return this.inner().lowCpuThreshold();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public ConfigDataImpl withResourceGroup(String resourceGroup) {
        this.resourceGroup = resourceGroup;
        return this;
    }

    @Override
    public ConfigDataImpl withDigests(List<DigestConfig> digests) {
        this.inner().withDigests(digests);
        return this;
    }

    @Override
    public ConfigDataImpl withExclude(Boolean exclude) {
        this.inner().withExclude(exclude);
        return this;
    }

    @Override
    public ConfigDataImpl withLowCpuThreshold(CpuThreshold lowCpuThreshold) {
        this.inner().withLowCpuThreshold(lowCpuThreshold);
        return this;
    }

}
